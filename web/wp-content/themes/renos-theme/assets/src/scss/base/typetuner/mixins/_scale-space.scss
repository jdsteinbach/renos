// Generate margin / padding based on baseline rhythm
@mixin scale-space($type, $fs, $t:false, $r:false, $b:false, $l:false) {
  @each $bp, $scale in $bp-scales {
    @include bp($bp) {
      $this-bp-scale: sc(map-get($bp-scales, $bp));
      $actual-font: loop-pos($fs, $this-bp-scale);
      $actual-rhythm: map-get($bp-line-height, $bp);
      $calc-rhythm: $main-font * $actual-rhythm;
      $em-value: $calc-rhythm / $actual-font;

      @if $t != false and $t != null {
        #{$type}-top: ($t * $em-value) * 1em;
      }

      @if $r != false and $r != null {
        #{$type}-right: ($r * $em-value) * 1em;
      }

      @if $b != false and $b != null {
        #{$type}-bottom: ($b * $em-value) * 1em;
      }

      @if $l != false and $l != null {
        #{$type}-left: ($l * $em-value) * 1em;
      }
    }
  }
}

// Alias for scale-space() with margin
@mixin scale-margin($fs, $t, $r, $b, $l) {
  @include scale-space('margin', $fs, $t, $r, $b, $l);
}

// Alias for scale-space() with padding
@mixin scale-padding($fs, $t, $r, $b, $l) {
  @include scale-space('padding', $fs, $t, $r, $b, $l);
}
